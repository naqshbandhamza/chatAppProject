# Generated by Django 5.2 on 2025-06-03 16:37

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.AutoField(db_column='IdUser', primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('firstname', models.CharField(max_length=100)),
                ('lastname', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('phone', models.CharField(blank=True, max_length=30, null=True, unique=True)),
                ('status', models.CharField(blank=True, max_length=45, null=True)),
                ('dob', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('chat_id', models.AutoField(db_column='IdChat', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(db_column='creatorUsername', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chat',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('message_id', models.AutoField(db_column='IdMessages', primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=500)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(db_column='fromchat', on_delete=django.db.models.deletion.CASCADE, to='chatapp.chat')),
                ('sender', models.ForeignKey(db_column='fromuser', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'messages',
                'ordering': ['sent_at'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.AutoField(db_column='IdPosts', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='title', max_length=45)),
                ('content', models.CharField(max_length=500)),
                ('image', models.CharField(blank=True, db_column='img', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(db_column='fromuser', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.AutoField(db_column='IdDocuments', primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='comment_at')),
                ('author', models.ForeignKey(db_column='comment_by', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='frompost', on_delete=django.db.models.deletion.CASCADE, to='chatapp.post')),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('participant_id', models.AutoField(db_column='IdParticipants', primary_key=True, serialize=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(db_column='fromchat', on_delete=django.db.models.deletion.CASCADE, to='chatapp.chat')),
                ('user', models.ForeignKey(db_column='userId', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'participants',
                'unique_together': {('user', 'chat')},
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('like_id', models.AutoField(db_column='IdLikes', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='liked_at')),
                ('user', models.ForeignKey(db_column='liked_by', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='frompost', on_delete=django.db.models.deletion.CASCADE, to='chatapp.post')),
            ],
            options={
                'db_table': 'likes',
                'unique_together': {('post', 'user')},
            },
        ),
    ]
